<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F12%2F12%2Fpython%2F</url>
    <content type="text"><![CDATA[1、一行代码实现1–100之和 利用sum()函数求和 2、如何在一个函数内部修改全局变量 利用global 修改全局变量3、列出5个python标准库 os：提供了不少与操作系统相关联的函数 sys: 通常用于命令行参数 re: 正则匹配 math: 数学运算 datetime:处理日期时间4、字典如何删除键和合并两个字典 del和update方法 5、谈下python的GIL GIL 是python的全局解释器锁，同一进程中假如有多个线程运行，一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。 多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大6、python实现列表去重的方法 先通过集合去重，在转列表 8、python2和python3的range（100）的区别 python2返回列表，python3返回迭代器，节约内存 9、一句话解释什么样的语言能够用装饰器? 函数可以作为参数传递的语言，可以使用装饰器11、简述面向对象中new和init区别init是初始化方法，创建对象后，就立刻被默认调用了，可接收参数，如图 1、new至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别 2、new必须要有返回值，返回实例化出来的实例，这点在自己实现new时要特别注意，可以return父类（通过super(当前类名, cls)）new出来的实例，或者直接是object的new出来的实例 3、init有一个参数self，就是这个new返回的实例，init在new的基础上可以完成一些其它初始化的动作，init不需要返回值 4、如果new创建的是当前类的实例，会自动调用init函数，通过return语句里面调用的new函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名，；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的init函数，也不会调用其他类的init函数。13、列表[1,2,3,4,5],请使用map()函数输出[1,4,9,16,25]，并使用列表推导式提取出大于10的数，最终输出[16,25] map（）函数第一个参数是fun，第二个参数是一般是list，第三个参数可以写list，也可以不写，根据需求18、数据表student有id,name,score,city字段，其中name中的名字可有重复，需要消除重复行,请写sql语句 select distinct name from student19、10个Linux常用命令 ls pwd cd touch rm mkdir tree cp mv cat more grep echo20、python2和python3区别？列举5个1、Python3 使用 print 必须要以小括号包裹打印内容，比如 print(‘hi’)Python2 既可以使用带小括号的方式，也可以使用一个空格来分隔打印内容，比如 print ‘hi’2、python2 range(1,10)返回列表，python3中返回迭代器，节约内存3、python2中使用ascii编码，python中使用utf-8编码4、python2中unicode表示字符串序列，str表示字节序列 python3中str表示字符串序列，byte表示字节序列5、python2中为正常显示中文，引入coding声明，python3中不需要6、python2中是raw_input()函数，python3中是input()函数21、列出python中可变数据类型和不可变数据类型，并简述原理不可变数据类型：数值型、字符串型string和元组tuple不允许变量的值发生变化，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象（一个地址），如下图用id()方法可以打印对象的id可变数据类型：列表list和字典dict；允许变量的值发生变化，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[mongo]]></title>
    <url>%2F2018%2F12%2F11%2Fmongo%2F</url>
    <content type="text"><![CDATA[1.MongoDB的启动1.启动服务:sudo mongod 2.启动客户端:mongo 2.数据库的操作: 1.查看默认的数据库 db 2.查看所有的数据库 show dbs 3.查看所有的集合(表) show collections 4.查看集合中的文档(行) db.xx.find() 5.删除数据库 先进入,再db.dropDatabase() 3.集合(表)的操作: 1.查看所有的集合 show collections 2.创建集合 db.createCollection(“集合名字”) 3.删除集合 db.xx.drop() 4.文档内容的增删改: 1.数据的类型null、integer、 DateObjectID、string、boolean、Array; 2.增加数据:db.xx.insert({key:Value}) //1.新增一条数据 db.one.insert({_id:1,name:”张三”,age:28 }) db.one.insert({name:”老王”,age:88 }) //2.先字典 后赋值 dict = {_id:2,name:”小王吧”,age:18 } db.one.insert(dict)3.删除 db.xx.remove({条件}) //1.删除老王 db.one.remove({name:&quot;老王&quot;}) //2.删除所有的男生(默认 符合条件的都删除) db.one.remove({gender:true}) //3. 只删除 符合条件的 第一个 justOne db.one.remove({gender:false},{justOne:true}) //4.全部删除数据 db.one.remove({}) 4.改 update db.xx.update({查找条件},{修改内容}) //1.修改 小明 的名字 根据id //2. like //默认 其他的字段删除了 db.one.update({_id:4},{name:&quot;大明&quot;}) db.one.update({_id:5},{like:&quot;男朋友&quot;}) //2.只想修改指定的字段; 其他的不变$set db.one.update({_id:7},{$set:{name:&quot;霜霜&quot;}}) //3. 默认符合条件的只修改一个;全部修改 multi //男生的年龄 改成 30谁 db.one.update({gender:true},{$set:{age:30}}) //将女生的年龄 全部修改成 12岁 db.one.update({gender:false},{$set:{age:12}},{multi:true}) 5.文档的基本查询操作:1.基本查询 db.xx.find({查找条件}).pretty() 1.1: db.xx.find() 查找所有的内容 1.2: 查找所有的女生:返回所有符合条件的内容 db.stu.find({gender:false}) 1.3:只返回符合条件的第一个 db.stu.findOne({gender:true})2.条件运算: $lt $gt $lte $ne db.xx.find({字段:{运算符:值}}) //1.筛选年龄大于20岁的人 db.stu.find({age:{$gt:20}}) //2.筛选年龄 小于等于18岁的 db.stu.find({age:{$lte:18}) //3. 年龄不等于 45岁 db.stu.find({age:{$ne:45}})3.逻辑运算: $and $or db.xx.find({运算符:[{条件1},{条件1}]}) 1. $and 其实find默认多条件就是and db.stu.find({age:16,gender:true}) db.stu.find({$and:[{age:16},{gender:true}]) 2. $or // 年龄大约20岁,或者false 女生 db.stu.find({$or:[{age:{$gt:20}},{gender:false}]}) 3. $and 和 $or 混用的关系 // 年龄下雨45岁或者是女生; 必须是来自桃花岛 db.stu.find({$ang:[{$or:[{age:{$lt:45}},{gender:false}]},{hometown:&quot;桃花岛&quot;}] }) 4.范围运算:$in $nin db.xx.find({字段:{运算符:[值]}}) //1. 18 20 40的岁 db.stu.find({age:{$in:[18,20,40]}}) //2. 来自 大理 或者 蒙古 db.stu.find({hometown:{$in:[“大理”,”蒙古”]}}) 5.正则表达式: 1.db.xx.find({字段:/正则/}) 2.db.xx.find({字段:{$regex:”正则”}}) 6.自定义函数: db.xx.find({$where:待返回值的匿名函数}) //年龄小于 18的人 //this 操作的内容 db.stu.find({$where:function (){return this.age &lt; 18}}) 6.查询结果的显示: skip(n): 跳过几个在显示 limit(n): 允许显示几个 db.stu.find().skip(2).limit(3) 如果 skip和limit混用 结果一样的 投影: 允许查看的字段 db.xx.find({查询条件},{投影的条件字段:1}) db.stu.find({gender:false},{_id:1}) 排序: 升序 1 降序 -1 sort({字段:1}) db.stu.find().sort({age:-1,_id:-1}) 统计:count() db.xx.count({条件}) db.xx.find().count() db.stu.count({age:{$gt:30}}) db.stu.find({age:{$gt:30}}).count() 去重:distinct() db.xx.distinct(&quot;去重的字段&quot;,{条件}) // 取出年龄小于60岁一下 人的籍贯 db.stu.distinct(&quot;hometown&quot;,{age:{$lt:60}})]]></content>
  </entry>
  <entry>
    <title><![CDATA[first]]></title>
    <url>%2F2018%2F12%2F11%2Ffirst%2F</url>
    <content type="text"><![CDATA[奈何桥边，一位女子跪在孟婆面前哀求：婆婆，我可不可以不喝这碗汤，我不想忘了他。孟婆：人生苦楚，总逃不脱一个情字，你又何必如此执着？女子哭：地府中人，自然不懂人间情爱？孟婆放下手中汤碗，望着天上幽幽一叹：我怎会不懂，那时，他还不是月老，我也还不是孟婆]]></content>
  </entry>
</search>
